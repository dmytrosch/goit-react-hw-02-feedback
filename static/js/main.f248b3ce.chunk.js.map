{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/App.js","index.js"],"names":["Statistics","props","countTotalFeedback","good","bad","neutral","countPositiveFeedbackPercentage","FeedbackOptions","name","onClick","onLeaveFeedback","Section","title","children","App","state","buttonClickHandler","event","target","setState","prevState","total","Math","floor","this","Component","ReactDOM","render","document","querySelector"],"mappings":"oMAGe,SAASA,EAAWC,GAAQ,IAEnCC,EAKAD,EALAC,mBACAC,EAIAF,EAJAE,KACAC,EAGAH,EAHAG,IACAC,EAEAJ,EAFAI,QACAC,EACAL,EADAK,gCAEJ,OACI,oCACKJ,IAAuB,EACpB,oCACI,oCAAUC,GACV,uCAAaE,GACb,mCAASD,GAET,qCAAWF,KACX,iDACwBI,IADxB,MAKJ,iDCtBD,SAASC,EAAgBN,GACpC,OACI,oCACI,4BAAQO,KAAK,OAAOC,QAASR,EAAMS,iBAAnC,QAGA,4BAAQF,KAAK,UAAUC,QAASR,EAAMS,iBAAtC,WAGA,4BAAQF,KAAK,MAAMC,QAASR,EAAMS,iBAAlC,QCTG,SAASC,EAAQV,GAAQ,IAC5BW,EAAoBX,EAApBW,MAAOC,EAAaZ,EAAbY,SACf,OACI,6BACI,4BAAKD,GACJC,G,ICHQC,E,4MACjBC,MAAQ,CACJZ,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAETY,mBAAqB,SAACC,GAElB,OADgBA,EAAMC,OAAOV,MAEzB,IAAK,OACD,EAAKW,UAAS,SAACC,GACX,MAAO,CACHjB,KAAMiB,EAAUjB,KAAO,MAG/B,MACJ,IAAK,UACD,EAAKgB,UAAS,SAACC,GACX,MAAO,CACHf,QAASe,EAAUf,QAAU,MAGrC,MACJ,IAAK,MACD,EAAKc,UAAS,SAACC,GACX,MAAO,CACHhB,IAAKgB,EAAUhB,IAAM,Q,EAQzCF,mBAAqB,WAAO,IAAD,EACQ,EAAKa,MACpC,OAFuB,EACfZ,KADe,EACTE,QADS,EACAD,K,EAG3BE,gCAAkC,WAC9B,IAAMe,EAAQ,EAAKnB,qBACnB,OAAOoB,KAAKC,MAAO,EAAKR,MAAMZ,KAAOkB,EAAS,M,uDAG9C,OACI,6BACI,kBAACV,EAAD,CAASC,MAAM,yBACX,kBAACL,EAAD,CACIG,gBAAiBc,KAAKR,sBAG9B,kBAACL,EAAD,CAASC,MAAM,cACX,kBAACZ,EAAD,CACIG,KAAMqB,KAAKT,MAAMZ,KACjBE,QAASmB,KAAKT,MAAMV,QACpBD,IAAKoB,KAAKT,MAAMX,IAChBF,mBAAoBsB,KAAKtB,mBACzBI,gCACIkB,KAAKlB,wC,GAzDAmB,a,cCDjCC,EAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,W","file":"static/js/main.f248b3ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Statistics(props) {\r\n    const {\r\n        countTotalFeedback,\r\n        good,\r\n        bad,\r\n        neutral,\r\n        countPositiveFeedbackPercentage,\r\n    } = props;\r\n    return (\r\n        <>\r\n            {countTotalFeedback() > 0 ? (\r\n                <>\r\n                    <p>Good: {good}</p>\r\n                    <p>Neutral: {neutral}</p>\r\n                    <p>Bad: {bad}</p>\r\n\r\n                    <p>Total: {countTotalFeedback()}</p>\r\n                    <p>\r\n                        Positive feedback: {countPositiveFeedbackPercentage()}%\r\n                    </p>\r\n                </>\r\n            ) : (\r\n                <p>No feedback given</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    countTotalFeedback: PropTypes.func.isRequired,\r\n    countPositiveFeedbackPercentage: PropTypes.func.isRequired,\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function FeedbackOptions(props) {\r\n    return (\r\n        <>\r\n            <button name=\"good\" onClick={props.onLeaveFeedback}>\r\n                Good\r\n            </button>\r\n            <button name=\"neutral\" onClick={props.onLeaveFeedback}>\r\n                Neutral\r\n            </button>\r\n            <button name=\"bad\" onClick={props.onLeaveFeedback}>\r\n                Bad\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section(props) {\r\n    const { title, children } = props;\r\n    return (\r\n        <div>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.object,\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n    buttonClickHandler = (event) => {\r\n        const btnType = event.target.name;\r\n        switch (btnType) {\r\n            case \"good\":\r\n                this.setState((prevState) => {\r\n                    return {\r\n                        good: prevState.good + 1,\r\n                    };\r\n                });\r\n                break;\r\n            case \"neutral\":\r\n                this.setState((prevState) => {\r\n                    return {\r\n                        neutral: prevState.neutral + 1,\r\n                    };\r\n                });\r\n                break;\r\n            case \"bad\":\r\n                this.setState((prevState) => {\r\n                    return {\r\n                        bad: prevState.bad + 1,\r\n                    };\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    countTotalFeedback = () => {\r\n        const { good, neutral, bad } = this.state;\r\n        return good + neutral + bad;\r\n    };\r\n    countPositiveFeedbackPercentage = () => {\r\n        const total = this.countTotalFeedback();\r\n        return Math.floor((this.state.good / total) * 100);\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Section title=\"Please leave feedback\">\r\n                    <FeedbackOptions\r\n                        onLeaveFeedback={this.buttonClickHandler}\r\n                    />\r\n                </Section>\r\n                <Section title=\"Statistics\">\r\n                    <Statistics\r\n                        good={this.state.good}\r\n                        neutral={this.state.neutral}\r\n                        bad={this.state.bad}\r\n                        countTotalFeedback={this.countTotalFeedback}\r\n                        countPositiveFeedbackPercentage={\r\n                            this.countPositiveFeedbackPercentage\r\n                        }\r\n                    />\r\n                </Section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import App from './components/App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(<App/>, document.querySelector('#root'))\r\n"],"sourceRoot":""}